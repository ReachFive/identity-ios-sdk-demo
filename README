# Initialisation du projet XCode

## Intégration des frameworks

Intégrer le SDK SIM:

* SimSDK.framework

Si vous utilisez Facebook login, il faut ajouter:

* FBSDKCoreKit.framework
* FBSDKLoginKit.framework

Si vous utilisez Google login, il faut ajouter:

* GoogleOpenSource.framework
* GooglePlus.framework
* GooglePlus.bundle

Si vous utilisez Twitter login, il faut ajouter:
* Fabric.framework
* TwitterCore.framework
* TwitterKit.framework
* TwitterKitResources.bundle

Intégrer aussi les frameworks systèmes suivants dans le projet XCode:
* Accelerate.framework
* Accounts.framework
* AddressBook.framework
* AssetsLibrary.framework
* AVFoundation.framework
* AudioToolbox.framework
* Foundation.framework
* CoreData.framework
* CoreLocation.framework
* CoreMedia.framework
* CoreMotion.framework
* CoreGraphics.framework
* CoreText.framework
* MediaPlayer.framework
* MessageUI.framework
* MobileCoreServices.framework
* Security.framework
* SystemConfiguration.framework
* UIKit.framework

## Configuration du projet XCode
Sélectionner le target du projet dans T​argets > ​puis B​uild Settings ­> Other Linker Flags​ puis saisir ­​`lc++ ­ObjC`

Pour l'intégration avec Facebook

```
#!xml
	<key>CFBundleURLTypes</key>
	<array>
		<dict>
			<key>CFBundleURLName</key>
			<string></string>
			<key>CFBundleURLSchemes</key>
			<array>
				<string>fb501620563319874</string>
			</array>
		</dict>
		...
	</array>
```

Pour l'intégration avec Google:
```
#!xml
	<key>CFBundleURLTypes</key>
	<array>
		...
		<dict>
			<key>CFBundleTypeRole</key>
			<string>Editor</string>
			<key>CFBundleURLName</key>
			<string>your-app-bundle-id</string>
			<key>CFBundleURLSchemes</key>
			<array>
				<string>your-app-bundle-id</string>
			</array>
		</dict>
		...
	</array>
```
Pour l'intégration avec Twitter:
Ajouter la clé suivante corresondant à la configuration de Fabric 

```
#!xml
	<key>Fabric</key>
	<dict>
		<key>APIKey</key>
		<string>your-fabric-api-key</string>
		<key>Kits</key>
		<array>
			<dict>
				<key>KitInfo</key>
				<dict/>
				<key>KitName</key>
				<string>Crashlytics</string>
			</dict>
		</array>
	</dict>
```
# Utilisation du SDK

## Initialisation

Les appels au SDK passent principalement par la classe `R5Client`, pour commencer à l'utiliser ajouter l'import suivant:

```
#import <SimSDK/SimSDK.h>
```

L'initialisation s'effectue en appelant la méthode `R5Client.init` qui prend en paramètres:

* *apiKey*: (required) La clé d’API
* *domain*: (required) le domaine (host) dédié au client, ce paramètre servira au SDK d'établir les appels aux APIs backend
* *providers*: `NSList<R5ProviderData>` ce paramètre est optionnel et permet de passer les différentes configuration des providers (facebook, Google, Twitter...) directement au SDK, si ce paramètre est omis alors cette configuration est récupéré par un appel au backend SIM.
* onInitFinish: `R5InitFinishedCallback` callback quand l'initialisation est terminée

```
- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {
    
    R5InitFinishedCallback callBack = ^(R5Exception * error)
    {
        if (error)
        {
            NSLog(@">> onLoginWithProvider callback, SIM Native SDK Init Error \n%@", error.message);
            
        }
        else
        {
            NSLog(@">> onLoginWithProvider callback SIM Native SDK Init with success !");
        }
        
    };
    
    
    [R5Client init:@"your-api-domain"
            apiKey:@"your-api-key"
         providers:nil
      onInitFinish:callBack];
    
    [R5Client application:application didFinishLaunchingWithOptions:launchOptions];

    return YES;
}
```

## Appel au processus de login

Le déclenchement du processus de login peut se faire :

1/ Directement en invoquant le login pour un provider spécifique
```
[R5Client loginWithProvider:R5Paypal origin:@"landing" onView:self onLoginResponse:callBack];
```

2/ Ou bien sans spécifier de provider, dans ce cas un écran est affiché avec la liste des boutons de connexion correspondant aux providers configurés (passés directement durant l'initialisation ou bien configuré dans le Backend SIM).

```
[R5Client displayLoginButtons:@"homepage" onView:self onLoginResponse:callBack];
```
Dans les deux cas un paramètre origin (optionnel) peut être spécifié et permet de distinguer l'écran à l'origine de la connexion (par ex. home ou basket)
